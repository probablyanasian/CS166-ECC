"""
Adapted From: https://github.com/brichard19/ecdl/blob/master/scripts/gencurve.sage

Sage script for generating an elliptic curve over a prime field
of the given bit size. The curve has a prime order. A generator
of the group and a random element are also selected.
"""


# This file was *autogenerated* from the file gencurve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)

def generate_ecdlp(bits):
    print("Generating " + str(bits) + "-bit curve")

    curve, a, b, n, p = generate_curve(bits)
    g = curve.gens()
    q = curve.random_element()
    gx = g[_sage_const_0 ][_sage_const_0 ]
    gy = g[_sage_const_0 ][_sage_const_1 ]
    qx = q.xy()[_sage_const_0 ]
    qy = q.xy()[_sage_const_1 ]

    print("Modulus: " + str(p))
    print("a:       " + str(a))
    print("b:       " + str(b))
    print("order:   " + str(curve.order()))
    print("G:      (" + str(gx) + "," + str(gy) + ")")
    print("Q:      (" + str(qx) + "," + str(qy) + ")")
    return curve, q

def randint(low, high):
    return low + int((high - low) * random())


def generate_curve(bits):
    low = _sage_const_2  ** (bits - _sage_const_1 ) + _sage_const_1 
    high = _sage_const_2  ** (bits) - _sage_const_1 
    p = next_prime(randint(low, high))
    field = GF(p)

    while True:
        a = randint(_sage_const_1 , p)
        b = randint(_sage_const_1 , p)
        curve = EllipticCurve(field, [a, b])
        order = curve.order()
        if order < p and order > low and order in Primes():
            return curve, a, b, order, p

